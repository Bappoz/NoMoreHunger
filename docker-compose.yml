version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nomorehunger-db
    environment:
      POSTGRES_DB: foodrescue
      POSTGRES_USER: fooduser
      POSTGRES_PASSWORD: foodpass123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - nomorehunger-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fooduser -d foodrescue"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Spring Boot
  backend:
    build:
      context: ./food-rescue
      dockerfile: Dockerfile
    container_name: nomorehunger-backend
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/foodrescue
      - SPRING_DATASOURCE_USERNAME=fooduser
      - SPRING_DATASOURCE_PASSWORD=foodpass123
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
    ports:
      - "8082:8081"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nomorehunger-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8081/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend React
  frontend:
    build:
      context: ./food-rescue-frontend
      dockerfile: Dockerfile
    container_name: nomorehunger-frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:8081
      - VITE_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY:-}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - nomorehunger-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: nomorehunger-redis
    ports:
      - "6379:6379"
    networks:
      - nomorehunger-network
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nomorehunger-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - nomorehunger-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  nomorehunger-network:
    driver: bridge
